# **Инструкция по работе с Git**

![](1.jpeg)
## Создание нового локального репозиторияы

Для создания нового репозитория(инициализации)(т.е. добавления файла в git) нужно ввести команду:

        git init

## Внесение в временное хранилище(индекс) — изменения, которые затем войдут в коммит. 

Для того чтобы внести в индекс изменения, для дальнейшего коммита необходимо ввести команду:

        git add имя файла

        
## Коммит внесенных изменений в индекс

для того чтобы закомитить внесенные изменения в индекс, необходимо ввести команду:

    git commit "описание изменений"

## Команда для объединения предыдущих 2-х действий

Для того чтобы одновременно внести измнения в индекс и закомитить изменения, необходимо ввести команду:

        git commit -am "описание изменений"

## Проверка статуса репозитория

Для того чтобы проверить текущее состояние репозитория необходимо использовать команду:

        git status

## Проверка всех комитов в репозитории

Для того чтобы проверить все комиты необходимо ввести команду:

        git log

Для того чтобы проверить все комиты и полуить более короткую информацию необходимо ввести команду:

        git log --oneline

Для того чтобы вывести все комиты, использовать в том случае если мы переключились на более ранний комит и "будущие" комиты не будут видны, если ввести просто команду git log --oneline, необходимо ввести команду:

        git log --oneline --all

Для того чтобы при выводе коммитов увидеть ветвление, необходимо ввести команду

        git log --graph

В данной команде можно так же использовать аргументы

        --oneline или --all

## Перемещение между комитами

Для того чтобы переключиться между комитами необходимо ввести команду:

        git checkout

Если мы далее выведем команду git log --oneline, то около выбранного нами комита будет стоять HEAD

Для перехода в последний коммит необходимо переходить в например master

## Добавление изменений к отслеживанию

Для того чтобы показать какие изменения добавлены в комит необходимо ввести команду:

        git diff

Можно посмотреть изменения в любом комите, добавив его id после команды git diff
Можно сранить чем отличаются 2 комита, добавив их id после команды git diff 

        git diff <hash>
        git diff <hash> <hash>   

## Перемещение по папкам

Для того чтобы переместиться в какую либо папку необходимо ввести команду

        cd
Далее путь до папки. Или просто имя папки если она вложена в путь где мы сейчас находимся.
Для того чтобы выйти в корневую папку надо ввести команду
        ..

## Работа с ветками

Для того чтобы вывести в терминале все ветки которые имеются необходимо вывести команду

        git branch

Знаком * будет отмечаться ветка где мы сейчас находимся

Для того чтобы создать ветку необходимо ввести команду

        git branch <имя ветки>

Для переключения между ветками необходимо ввести команду

        git checkout

Для сливания веток, необходимо сначала перейти в ветку в которую ты хочешь залить и ввести команду

        git merge <Наименование ветки которую вливаем>

Для удаления ветки необходимо вветс команду

        git branch -d <имя ветки>

## Игноривание файлов

Для того чтобы при вызове команды git status не отображались не отслеживаемые файлы необходимо создать файл с имененм

        .gitignore

В данном файле мы прописываем имя файлов или папок которые мы не хотим чтобы они отслеживались


## Работа с конфликтами

При попытке слияния 2-хветок и если в данные ветки на одинаковых строках внесли разную информацию, система выдаст предупреждение о конфликте с наглядным просмотром отличающейся информации. Системой будет предложен один из вариантов действий:

* Сохранить информацию из **вливаемой ветки**
* Сохранить информацию из **ветки в которую делается слияние**
* Сохранить информацию из **двух** веток
* Подробно посмотреть различия


## Првязка локального репозитория к удаленному

1. Необхдоимо создать Учетную запись на сервисе удаленного репозитория (github, gitlab и т.д.)
2. Создать или зайти в уже созданный локальный репозиторий(папку)
3. Ввести следующие команды
 3.1. *git remote add origin <ссылка котораяя появится в удаленном репозитории после его создания>(https://github.com/GeneralMoroz/Gym.git)* 
 Данной командой мы **привязываем** локальный репозиторий к удаленному. Теперь git будет понимать куда отправлять информацию.
        origin - в данном примере это наименование удаленного репозитория
 3.2. *git branch -M main*
 Данной командой мы указываем что ветка **main** будет основной
 3.3. *git push -u origin main*
 Данной командой мы будем первый раз отправим (push) все изменения на удаленный репозиторий.

 Далее для того чтобы отправлять изменения с локального репозитория в удаленный необходимо ввести команду

        git push

Для того чтобы актуализировать локальный репозиторий, необходимо ввести команду
        git pull

Перед тем как передавать информацию в удаленный репозиторий и выполнять команду **git push** необходимо сначала "стянуть" информацию из удаленного репозитория с помощью команды **git pull**.
В противном случае может быть конфликт.

## Клонирование удаленного репозитория 

Перед вводом команды необходимо создать папку куда будет добавлен удаленный репозиторий.
Для того чтобы скопировать удаленный репозиторий и пользоваться им локально , необходимо ввести команду

        git clone <ссылка с удаленного репозитория>

При клонировании не своего удаленного репозитория с целью внесения изменения в проект и дальнешйшего предоставления данных изменений "хозяину проекта необходимо сделать следующие действия:

1. Склонировать(fork) с удаленного репозитория проект к себе в аккаунт в удаленном репозитории
2. нажать кнопку **Code** скопировать ссылку
3. Создать папку локально
4. В терминале(в новой папки не забыдь перейти в эту папку в терминале) вводим  команду

        git clone <ссылка с удаленного репозитория>

5. Лучше создать ветку в этом проекте
6. Отправляем изменения в склонированный удаленный репозиторий к себе в аккаунт (git push)
7. Далее будет ошибка с подсказкой команды которую необходимо сделать перед git push. Это связано с тем, что мы создали новую ветку в которой вносили изменения, а склонировали без нее.
8. В своем аккаунте удаленного репозитория видим появившуюся кнопку pull request, которая позволяет отправить изменения для утверждения хозяину проекта.

